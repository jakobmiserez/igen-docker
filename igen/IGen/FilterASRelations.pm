# ===================================================================
# IGen::FilterASRelations
#
# (c) 2005, Networking team
#           Computing Science and Engineering Dept.
#           UniversitÃ© catholique de Louvain
#           Belgium
#
# author Bruno Quoitin (bqu@info.ucl.ac.be)
# date 03/10/2005
# lastdate 04/10/2005
# ===================================================================

package IGen::FilterASRelations;

require Exporter;
@ISA= qw(Exporter IGen::FilterBase);

use strict;
use IGen::Definitions;
use IGen::FilterBase;
use IGen::Util;
use UCL::Progress;
use Graph::Directed;

# -----[ _init ]-----------------------------------------------------
#
# -------------------------------------------------------------------
sub _init()
{
    my ($self)= @_;

    $self->SUPER::_init();
    $self->set_capabilities();
}

# -----[ import_graph ]----------------------------------------------
#
# -------------------------------------------------------------------
sub import_graph($$)
{
    my ($self, $filename)= @_;

    my $graph= new Graph::Directed();

    my $progress= new UCL::Progress;
    $progress->{message}= "Importing AS relationships ";
    $progress->{verbose}= 1;
    $progress->{pace}= 1;
    $progress->{percent}= 0;

    # ---| Load AS-relationships file |---
    if (!open(RELATIONS, "<$filename")) {
	$self->set_error("unable to open \"$filename\": $!");
	return undef;
    }

    my $cnt= 0;
    while (<RELATIONS>) {
	chomp;
	(m/^\#/) and next;

	my @fields= split /\s+/;
	if (scalar(@fields) < 3) {
	    $self->set_error("syntax error");
	    close(RELATIONS);
	    return undef;
	}
	my $src= $fields[0];
	my $dst= $fields[1];
	my $relation= $fields[2];
	if (($relation != 0) && ($relation != 1)) {
	    $self->set_error("unknown relation type $relation");
	    close(RELATIONS);
	    return undef;
	}

	if ($graph->has_edge($src, $dst)) {
	    $self->set_error("duplicate relationship $src-$dst");
	    close(RELATIONS);
	    return undef;
	}
	$graph->add_edge($src, $dst);
	$graph->set_attribute(UCL::Graph::ATTR_RELATION,
			      $src, $dst, $relation);

	$cnt++;
	$progress->progress($cnt);
    }
    $progress->end($cnt);
    close(RELATIONS);

    $self->set_error();
    return $graph;
}

# -----[ export_graph ]----------------------------------------------
#
# -------------------------------------------------------------------
sub export_graph($$$)
{
    my ($self, $graph, $filename)= @_;

    if (!open(RELATIONS, ">$filename")) {
	$self->set_error("unable to create file \"$filename\": $!");
	return -1;
    }
    print RELATIONS "# Generated by IGen::FilterASRelations\n";
    print RELATIONS "# on ".localtime(time())."\n";
    print RELATIONS "# <as-1> <as-2> <relation>\n";
    print RELATIONS "# where <relation> is\n";
    foreach (keys %{ILINK_RELATIONS()}) {
	print RELATIONS "#   $_  for  ".ILINK_RELATIONS->{$_}."\n";
    }
    my @relations= $graph->edges();
    for (my $i= 0; $i < scalar(@relations)/2; $i++) {
	my $src= $relations[$i*2];
	my $dst= $relations[$i*2+1];
	my $relation= $graph->get_attribute(UCL::Graph::ATTR_RELATION,
					    $src, $dst);
	print RELATIONS "$src\t$dst\t$relation\n";
    }
    close(RELATIONS);

    $self->set_error();
    return 0;
}
