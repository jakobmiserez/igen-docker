# ===================================================================
# IGen::FilterMerindol
#
# (c) 2005-2009, IP Networking Lab
#                Computing Science and Engineering Dept.
#                Universite catholique de Louvain
#                Louvain-la-Neuve
#                Belgium
#
# author Bruno Quoitin (bruno.quoitin@uclouvain.be)
# date 03/08/2009
# $Id$
# ===================================================================

package IGen::FilterMerindol;

require Exporter;
@ISA= qw(Exporter IGen::FilterBase);

use strict;
use IGen::FilterBase;

# -----[ _init ]-----------------------------------------------------
#
# -------------------------------------------------------------------
sub _init()
{
    my ($self)= @_;

    $self->SUPER::_init();
    $self->set_capabilities(IGen::FilterBase::EXPORT_SINGLE);
    $self->{resolve_cache}= {};
}

# -----[ export_graph ]----------------------------------------------
# Format is as follows (example provided by Pascal)
#
#  0
#  1
#  2
#  3
#  L
#  0 2 2
#  3 1 8
#  2 3 6
#  2 0 1
#  1 3 7
#  3 2 5
#
# -------------------------------------------------------------------
sub export_graph($$$)
{
    my ($self, $graph, $filename)= @_;

    if (!open(MERINDOL, ">$filename")) {
	$self->set_error("could not create \"$filename\": $!");
	return -1;
    }

    print MERINDOL "# Generated by IGen::FilterMerindol\n";
    print MERINDOL "# on ".localtime(time())."\n";

    # Export nodes
    my @nodes= $graph->vertices();
    for (my $i= 0; $i < @nodes; $i++) {
      print MERINDOL "$i\n";
    }

    # Export edges
    print MERINDOL "L\n";

    my @edges= $graph->edges();
    for (my $i= 0; $i < @edges/2; $i++) {
	my $u= $edges[$i*2];
	my $v= $edges[$i*2+1];
	my $weight= 0;
	if ($graph->has_attribute(UCL::Graph::ATTR_WEIGHT, $u, $v)) {
	  $weight= $graph->get_attribute(UCL::Graph::ATTR_WEIGHT, $u, $v);
	}
	print MERINDOL "$u\t$v\t$weight\n";
    }
    close(MERINDOL);

    $self->set_error();
    return 0;
}
