# ===================================================================
# IGen::FilterTOTEM
#
# (c) 2005, Networking team
#           Computing Science and Engineering Dept.
#           UniversitÃ© catholique de Louvain
#           Belgium
#
# author Bruno Quoitin (bqu@info.ucl.ac.be)
# date 23/08/2005
# lastdate 25/08/2005
# ===================================================================

package IGen::FilterTOTEM;

require Exporter;
@ISA= qw(Exporter IGen::FilterBase);

use strict;
use IGen::FilterBase;
use Symbol;

# ---| Location of TOTEM Domain XML Schema |---
use constant SCHEMA_XSD_DOMAIN =>
    "http://totem.run.montefiore.ulg.ac.be/Schema/Domain-v1_0.xsd";
# ---| Location of TOTEM TrafficMatrix XML Schema |---
use constant SCHEMA_XSD_TRAFFIC_MATRIX =>
    "http://totem.run.montefiore.ulg.ac.be/Schema/TrafficMatrix-v1_1.xsd";

# -----[ _init ]-----------------------------------------------------
#
# -------------------------------------------------------------------
sub _init()
{
    my ($self)= @_;

    $self->SUPER::_init();
    $self->set_capabilities(IGen::FilterBase::EXPORT_SINGLE);
}

# -----[ import_graph ]----------------------------------------------
#
# -------------------------------------------------------------------
sub import_graph($$)
{
    my ($self)= @_;
    $self->set_error("import is not supported");
    return undef;
}

# -----[ xml_header ]------------------------------------------------
sub xml_header($$)
{
    my ($self, $stream)= @_;

    print $stream "<?xml".
	" version=\"1.0\"".
	" encoding=\"UTF-8\"".
	" standalone=\"yes\"".
	"?>\n";
}

# -----[ xml_domain_info ]-------------------------------------------
sub xml_domain_info($$$)
{
    my ($self, $stream)= @_;

    print $stream "  <info>\n";
    print $stream "    <title>".
	"Topology generated by IGen::FilterTOTEM".
	"</title>\n";
#    print $stream "    <date>".localtime(time())."</date>\n";
    print $stream "  </info>\n";
}

# -----[ xml_domain_topology_nodes ]---------------------------------
sub xml_domain_topology_nodes($$$)
{
    my ($self, $stream, $graph)= @_;

    print $stream "    <nodes>\n";
    foreach my $v ($graph->vertices()) {
	print $stream "      <node id=\"$v\">\n";
	print $stream "        <rid>$v</rid>\n";
	if ($graph->has_attribute(UCL::Graph::ATTR_NAME, $v)) {
	    my $name= $graph->get_attribute(UCL::Graph::ATTR_NAME, $v);
	    print $stream "        <description>$name</description>\n";
	}
	if ($graph->has_attribute(UCL::Graph::ATTR_COORD, $v)) {
	    my $coord= $graph->get_attribute(UCL::Graph::ATTR_COORD, $v);
	    print $stream "        <location".
		" latitude=\"$coord->[1]\"".
		" longitude=\"$coord->[0]\"".
		"/>\n";
	}
	print $stream "      </node>\n";
    }
    print $stream "    </nodes>\n";
}

# -----[ xml_domain_topology_links ]---------------------------------
sub xml_domain_topology_links($$$)
{
    my ($self, $stream, $graph)= @_;

    print $stream "    <links>\n";
    my @edges= $graph->edges();
    for (my $i= 0; $i < @edges/2; $i++) {
	my $v_i= $edges[$i*2];
	my $v_j= $edges[$i*2+1];
	print $stream "      <link id=\"".$v_i."_".$v_j."\">\n";
	print $stream "        <from if=\"0\" node=\"$v_i\"/>\n";
	print $stream "        <to if=\"0\" node=\"$v_j\"/>\n";
	if ($graph->has_attribute(UCL::Graph::ATTR_DELAY, $v_i, $v_j)) {
	    my $delay= $graph->get_attribute(UCL::Graph::ATTR_DELAY,
					     $v_i, $v_j);
	    print $stream "        <delay>$delay</delay>\n";
	}
	if ($graph->has_attribute(UCL::Graph::ATTR_CAPACITY, $v_i, $v_j)) {
	    my $capacity= $graph->get_attribute(UCL::Graph::ATTR_CAPACITY,
						$v_i, $v_j);
	    print $stream "        <bw>$capacity</bw>\n";
	}
	print $stream "      </link>\n";
    }
    print $stream "    </links>\n";
}

# -----[ xml_domain_topology ]---------------------------------------
sub xml_domain_topology($$$)
{
    my ($self, $stream, $graph)= @_;

    print $stream "  <topology>\n";
    $self->xml_domain_topology_nodes($stream, $graph);
    $self->xml_domain_topology_links($stream, $graph);
    print $stream "  </topology>\n";
}

# -----[ xml_domain_igp ]--------------------------------------------
sub xml_domain_igp($$$)
{
    my ($self, $stream, $graph)= @_;

    print $stream "  <igp>\n";
    print $stream "    <links>\n";    
    my @edges= $graph->edges();
    for (my $i= 0; $i < @edges/2; $i++) {
	my $v_i= $edges[$i*2];
	my $v_j= $edges[$i*2+1];
	print $stream "      <link id=\"".$v_i."_".$v_j."\">\n";
	print $stream "        <static>\n";
	if ($graph->has_attribute(UCL::Graph::ATTR_WEIGHT, $v_i, $v_j)) {
	    my $weight= $graph->get_attribute(UCL::Graph::ATTR_WEIGHT,
					      $v_i, $v_j);
	    print $stream "          <metric>$weight</metric>\n";
	}
	print $stream "        </static>\n";
	print $stream "      </link>\n";
    }
    print $stream "    </links>\n";
    print $stream "  </igp>\n";
}

# -----[ xml_domain ]------------------------------------------------
sub xml_domain($$$)
{
    my ($self, $stream, $graph)= @_;

    my $domain_id= $graph->get_attribute(UCL::Graph::ATTR_AS);

    print $stream "<domain ASID=\"$domain_id\"".
      " xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"".
      " xsi:noNamespaceSchemaLocation=\"".SCHEMA_XSD_DOMAIN."\"".
      ">\n";
    $self->xml_domain_info($stream);
    $self->xml_domain_topology($stream, $graph);
    $self->xml_domain_igp($stream, $graph);
    print $stream "</domain>\n";
}

# -----[ xml_graph ]-------------------------------------------------
sub xml_graph($$$)
{
    my ($self, $graph, $filename)= @_;
    my $stream= gensym();

    if (!open($stream, ">$filename")) {
	$self->set_error("unable to create XML file \"$filename\": $!");
	return undef;
    }

    $self->xml_header($stream);
    $self->xml_domain($stream, $graph);
    
    close($stream);

    return 0;
}

# -----[ xml_TM ]----------------------------------------------------
sub xml_TM($$$)
{
    my ($self, $stream, $graph)= @_;

    my $domain_id= $graph->get_attribute(UCL::Graph::ATTR_AS);
    my $TM= $graph->get_attribute(UCL::Graph::ATTR_TM);

    print $stream "<TrafficMatrixFile".
	" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"".
	" xsi:noNamespaceSchemaLocation=\"".SCHEMA_XSD_TRAFFIC_MATRIX."\"".
	">\n";
    print $stream "  <IntraTM ASID=\"$domain_id\">\n";
    foreach my $src (keys %$TM) {
	print $stream "    <src id=\"$src\">\n";
	foreach my $dst (keys %{$TM->{$src}}) {
	    my $volume= $TM->{$src}{$dst};
	    print $stream "      <dst id=\"$dst\">$volume</dst>\n";
	}
	print $stream "    </src>\n";
    }
    print $stream "  </IntraTM>\n";
    print $stream "</TrafficMatrixFile>\n";
}

# -----[ xml_graph_TM ]----------------------------------------------
sub xml_graph_TM($$$)
{
    my ($self, $graph, $filename)= @_;

    my $stream= gensym();

    if (!open($stream, ">$filename")) {
	$self->set_error("unable to create XML file \"$filename\": $!");
	return undef;
    }

    $self->xml_header($stream);
    $self->xml_TM($stream, $graph);
    
    close($stream);

    return 0;
}

# -----[ export_graph ]----------------------------------------------
#
# -------------------------------------------------------------------
sub export_graph($$$)
{
    my ($self, $graph, $filename)= @_;

    # ---| Export topology |---
    if ((my $result= $self->xml_graph($graph, $filename)) != 0) {
	return $result;
    }

    # ---| Export traffic matrix if defined |---
    if ($graph->has_attribute(UCL::Graph::ATTR_TM)) {
	$filename=~ s/^(.+)(\.xml)$/$1-TM$2/;
	if ((my $result= $self->xml_graph_TM($graph, $filename)) != 0) {
	    return $result;
	}
    }

    $self->set_error();
    return 0;
}
